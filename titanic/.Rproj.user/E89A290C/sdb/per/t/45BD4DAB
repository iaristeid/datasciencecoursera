{
    "contents" : "Coursera \"Data Science\" - Titanic Kaggle Competition\n========================================================\nThe task is to predict whether a given passenger survived the sinking of the Titanic based on various attributes including sex, age, location of the passenger's cabin on the ship, family members, the fare they paid, and other information.\n\nThe solution is implemented in R, as follows:\n1. Training and Test Data are loaded into R\n2. Features to be used to in prediction algorithm are selected\n3. Data Cleansing and Preparation is performed.\n4. The training data set is further split in training and validation set.\n5. The predictive algorithm is trained using the training data set.\n6. Prediction error is measured on the validation set.\n7. The Prediction Algorithm is finally applied on test set and compared towards the expected outcome.\n\nI followed the instructions of mentioned in:\nhttp://trevorstephens.com/post/72916401642/titanic-getting-started-with-r\n\n## Data \n\nThe training data for this project are available here: \nhttps://www.kaggle.com/c/titanic-gettingStarted/download/train.csv\n\nThe test data are available here: \nhttps://www.kaggle.com/c/titanic-gettingStarted/download/test.csv\n\n\n## Data Ingestion\n\nFirst we load the training and test data sets into R (training and testing data frames).\n\n```{r}\nSys.getlocale(category = \"LC_ALL\")\nSys.setlocale(\"LC_TIME\", 'English_US')\n\ntraining <- read.csv(\"./data/train.csv\")\ntraining$Survived <- as.factor(training$Survived)\n```\n\n```{r}\ntesting <- read.csv(\"./data/test.csv\")\n```\n\n# Feature Selection\nIn order to select the numeric features to be used as predictors, we calculate the correlation between features and we locate those which have maximum impact on others (absolute value of correlation > 0.5)\nThe list of most important numeric features is the following:\n- Fare\n- Pclass\n\n```{r}\nM <- abs(cor(training[sapply(training[], is.numeric)]))\ndiag(M) <- 0\nwhich(M > 0.5,arr.ind=T)\n```\n\nUsing only the numeric features did not work well (the prediction accuracy was unacceptably low), therefore I revisited the features and selected also some of the non-numeric which seem very important.\n\nWe therefore construct and plot a decision tree to check the impact of each feature.\n\n```{r}\nlibrary(rpart)\nlibrary(rattle)\nlibrary(rpart.plot)\nlibrary(RColorBrewer) \nfit <- rpart(Survived ~ Fare + Pclass + Sex + Age + SibSp + Parch + Embarked, data=training, method=\"class\")\nfit\nfancyRpartPlot(fit) \n```\n\n## Data Cleansing and Preparation\n\nHowever, random forest excludes records with missing feature values (e.g. Age).\n\nTherefore, we print the summary of training data set values in order to locate features with missing values and we estimate them as follows:\n\n```{r}\nsummary(training)\n\nwhich(training$Embarked == '')\ntraining$Embarked[c(62,830)] <- 'S'\ntraining$Embarked <- as.factor(training$Embarked)\n\nAgefit <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked, data=training[!is.na(training$Age),], method=\"anova\")\ntraining$Age[is.na(training$Age)] <- predict(Agefit, training[is.na(training$Age),])\nsummary(training$Age)\n```\n\n## Preparation for Cross-Validation\n\nIn order to measure our model we partition our training set into two parts (75%, 25%): train1, test1 data frames.\n\n```{r}\nlibrary(caret)\nlibrary(randomForest)\ninTrain <- createDataPartition(training$Survived,p=0.75,list=FALSE)\ntrain1 <- training[inTrain,]\ntest1 <- training[-inTrain,]\n```\n\n\n## Prediction Models\n\nWe will be using Random Forest based on the first part of our training set (train1). \nWe are now ready to train our model using the Random Forest algorithm:\n```{r}\n#rf1 <- randomForest(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data=train1, importance=TRUE, ntree=2000)\nrf1 <- train(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,train1,method=\"rf\") \n```\n\n## Error Estimation\n\nWe will estimate errors by comparing predictions towards the real classe values of the second part of training set (test1).\nError probability and number of correct predictions are displayed below:\n\n```{r}\npred1 <- predict(rf1,test1[,-2])\nA <- table(pred1,test1$Survived)\nA\nerror1 <- (sum(A)-sum(diag(A)))/sum(A)\npredRight1 <- pred1==test1$Survived\n\nerror1\nsum(predRight1)\n```\n\n\n## Final Prediction Outcome\n\nThe prediction outcome of the final model on the original test set is:\n\n```{r}\npredict(rf1,testing)\n\n```\n",
    "created" : 1408461554929.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "337220542",
    "id" : "45BD4DAB",
    "lastKnownWriteTime" : 1408484951,
    "path" : "~/R/titanic/titanic.Rmd",
    "project_path" : "titanic.Rmd",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}